vc 14:
	- added $(QTDIR)\include to project-includes
	- added qt mainwindow
	- application builds and shows a blank window

vc 15:
	- working on getting qt to run on surface book

vc 16:
	- changed window title to "PATCHBOT v1.0"
	- experimented with qt-designer - no results though

vc 17:
	- started working with slots in qt

vc 18:
	- first test button press working

vc 19:
	- implemented a rough sketch of the main ui window

vc 20:
	- the main window layout with widget-resizing is done

vc 21:
	- revamped the ui for surface book resolution

vc 22:
	- further chagnes to ui-scaling

vc 23:
	- fixed a couple more ui issues regarding the programming panel

vc 24:
	- improved the scaling of programming and mission section

vc 25:
	- removed toolbar, menubar and progressbar from layout main_window
	- improved ui scaling

vc 26:
	- all button slots are now implemented and functional
	- minor changes to the ui
	- wrapped QApplication in main in qscopedpointer to prevent memory leaks

vc 27:
	- added some color to buttons and various other ui elements
	- layout coloring wip

vc 28:
	- layout coloring almost complete
	- scrollbar coloring still wip

vc 29:
	- finished main_window ui
	- added image resources

vc 30:
	- minor code cleanup for presentation of task 3

vc 31:
	- removed unnecessary commented code


TASK 4:
vc 32:
	- fixed a missing &
	- implemented qfiledialog to select a colony to be loaded

vc 33:
	- GameController implementation wip
	- Colonys can now be loaded into the GameController

vc: 34:
	- added paintEvent method to main_window
	- copied some code which could work for rendering the pixel map
	- rough idea on how the pixel-map will be rendered

vc 35:
	- render setup wip

vc 36:
	- new concept: gui is handling rendering while the model just provides data

vc 37:
	- added a RenderWidget inheriting from QWidget to draw the game to (wip)

vc 38:
	- first example rectangle rendered on RenderWidget!

vc 39:
	- render-widget now has a shared_ptr ref to the current gamecontroller
	- gamecontroller ref is set after creating the controller in mainwindow

vc 40: 
	- fixed qt path from M.M.'s PC

vc 41:
	- all images are loaded in the gamecontroller constructor
	- the images are stored in two vectors one for ground tiles one for robots
	- the vectors are wrapped in shared_ptr to avoid memory-leaks

vc 42:
	- render still wip
	- mostly transition commit
	- added closed and open enums for doors back in
	- one return statement missing coming in next commit

vc 43:
	- surface book branch and desktop branch conflict solved

vc 44:
	- static render working

vc 45:
	- scrollbars now scale with window size
	- moving render region with scrollbars wip

vc 46:
	- smooth scrolling in x-direction
	- code needs cleanup
	- y-direction still missing

vc 47:
	- fixed a bug where the map wouldn't be displayed after loading

vc 48:
	- added scrolling for y-direction
	- added render for robots
	- patchbot render wip

vc 49:
	- patchbot is now the last element of the robots vector
	- patchbot is rendered together with the other robots
	- images now get mirrored vertically to allow them to be correctly rendered
	  by the qt-library
	- task 4 finished (maybe some cleanup left)

vc 50:
	- GameController now stores QImages instead of Texture objects
	- mirroring the images for rendering is now done when loading in controller
	  instead of doing it to the raw image data
	- added tile_Size variable to render
	- reworked render to work with the new way of loading images from controller

vc 51:
	- added exception handling for loading maps and textures via gamecontroller

vc 52:
	-fixed a const in renderwdiget

vc 53:
	- test for task 4 done! (22.5 / 24 points)
	- minor adjustments from supervisor (see TODO list)

vc 54:
	- removed unecessary empty destructors

vc 55:
	- added const& to for-each loops

vc 56:
	- fixed missing const in fornt of member-getters

vc 57:
	- exception are now caught a top level in ui class

vc 58:
	- controller now stores all necessary QImages in std::maps rather than
	  in std::vectors

vc 59:
	- TileType QImage map needs another rework

vc 60:
	- reworked QImage maps in controller to now hold a enumobject plus a 
	  shared_ptr to a QImage
	- also the map itself is now a normal member instead of a shared_ptr

vc 61:
	- added roadmap for task 5

vc 62:
	- fixed corrupted mocking paths
	- added X to the repitions dropdown menu

vc 63:
	- combobox slot implemented
	- basic datatypes for patchbot moves are now implemented

vc 64:
	- added the ability to program patchbot
	- the programming interface buttons are now all functional

vc 65:
	- scrollbar for programming window almost working
	- transfer commit

vc 66:
	- programming field is now fully implemented
	- scrolling the program textfield works too

vc 67:
	- mission buttons now disable each other according to task

vc 68:
	- added a different style for disabled buttons and the combobox
	- all buttons now enable / disable the ui correctly
	- added a check for if the program is empty so it cannot be started
	- improved controller class documentation
	- added flag to represent wether automatic mode is active or not

vc 69:
	- added support for high density screens

vc 70:
	- patch now only appears if the game is in progress
	- patchbot now has basic movement but no collision yet
	- if the current programs ends before patchbot reaches a server the game 
	  is lost

vc 71:
	- fixed a bug where programs would end up in endless loops
	- all robots now have their positions reset when a game sessions ends

vc 72:
	- collision for patchbot is now almost complete only manual doors and
	  their implementation are missing
	- added a blocked attribute to robot to indicate a robot is waiting on 
	  the environment

vc 73:
	- doors are now implemented
	- patchbot can open manual doors
	- doors reset on game end

vc 74:
	- implemented the go until obstacle command
	- fixed a bug where move until obstacle commands would be shows correctly
	  in the game current program lineedit

vc 75:
	- automatic mode is now fully implemented
	- TASK 5 main programming work complete

vc 76:
	- updated TODO

vc 77:
	- fixed a bug where patchbot_move.h would not be compiled as header file
	- missing feature: keep doors open when patchbot blocks the tile
	- maybe implement door blocking for all robots at once

vc 78:
	- doors now get blocked when patchbot stands on them
	- resetting a run is now only one function in main_window
	- fixed a bug where the cancel button would not udpate the game

vc 79:
	- moved interface update after reset into reset method to minimize
	  duplicate code

vc 80:
	- complete rework of the current project file structure
	- added new filters for better visibility

vc 81:
	- deleted oudated files
	- put patchbot_move.h in include

vc 82:
	- fixed a bug where reaching the end of the program would take priority
	  over other win/loose conditions

vc 83:
	- testate for task 5 done (23.5 / 24)

TODO:
	const refs in der colony
	tür update und reset in tür klasse auslagern

	- maybe move timer in controller though it is Qt object and thus requires
	  ownership from main_window

	- maybe declare QTimer as a raw pointer instead of a smart pointer since
	  deletion is taken care off by the parent passed in its constructor

	- doors currently only check if patchbot is blocking them future
	  implementations of robots may require a rework to check wether any given
	  robot is on the door tile
	  -> maybe add flag to door class in order to save wether a robot is
	     standing on a particular door
	  -> blocked flag could be implemented for all tiles to make future
	     collision detection with other robots easier




